
//sample layout button handler
info user.getJSON("timezone");
timezone = user.getJSON("timezone");
header = Map();
footer = Map();
sections = list();
gistid = target.get("id");
// info target;
tabid = target.get("tab_id");
info tabid;
tabsArr = {{"label":"Gists - Home","id":"hometab"},{"label":"Starred - Gists","id":"startab"},{"label":"All - Gists","id":"alltab"}};
//////////////////////////
userdetails = invokeurl
[
	url :"https://api.github.com/user"
	type :GET
	parameters:""
	detailed:false
	connection:"githubgist"
	content-type:"application/vnd.github+json"
];
// info userdetails;
Adminuser = userdetails.get("login");
/////////////////////////////////////
if(tabid.equalsIgnoreCase("hometab"))
{
	page = 1;
	// 	info page;
	gist = invokeurl
	[
		url :"https://api.github.com/gists/" + gistid
		type :GET
		parameters:""
		detailed:false
		connection:"githubgist"
		content-type:"application/vnd.github+json"
	];
	// 	info gist;
	allcomments = invokeurl
	[
		url :gist.get("comments_url")
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info allcomments;
	comments = invokeurl
	[
		url :gist.get("comments_url") + "?per_page=10&page=" + page
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info comments;
	elements = list();
	gistfiles = gist.get("files");
	gistfilesc = gistfiles.keys();
	name = gistfilesc.get(0);
	// 	content = gistfiles.get(name).get("content");
	// 	size = gistfiles.get(name).get("size");
	desc = gist.get("description");
	if(desc == null)
	{
		desc = name;
	}
	url = gist.get("html_url");
	urlrev = url + "/revisions";
	if(name.len() > 100)
	{
		name = name.subString(0,96) + "...";
	}
	elements.add({"type":"text","text":"Gist : " + "[" + name + "](" + urlrev + ")"});
	if(desc.len() > 256)
	{
		desc = desc.subString(0,250) + "...";
	}
	elements.add({"type":"text","text":desc});
	gid = gist.get("id");
	header = {"title":"Gist - Comments","navigation":"continue","buttons":{{"label":"+ Comment","type":"invoke.function","name":"CreategistComment","id":gid,"emotion":"positive"}}};
	elements.add({"type":"divider"});
	elements.add({"type":"title","text":"Comments (" + allcomments.size() + ")"});
	sections.add({"id":1,"elements":elements});
	if(comments == null || comments.size() == 0)
	{
		elements.add({"type":"title","text":"No comments found"});
	}
	else
	{
		for each  comment in comments
		{
			// 			info comment;
			// 		info elements;
			cname = comment.get("user").get("login");
			realname = cname;
			if(cname.len() > 100)
			{
				cname = cname.subString(0,97) + "...";
			}
			avatar = comment.get("user").get("avatar_url");
			body = comment.get("body");
			if(body.contains("!") && body.contains("[") && body.contains("]") && body.contains("(") && body.contains(")"))
			{
				a1 = body.indexOf("[");
				info a1;
				a2 = body.indexOf("]");
				info a2;
				u1 = body.indexOf("(");
				info u1;
				u2 = body.indexOf(")");
				info u2;
				body = body.subString(a1,u1) + body.subString(u1,u2 + 1);
				// 				info body;
			}
			if(body.len() > 200)
			{
				body = body.subString(0,200) + "...";
			}
			commit = comment.get("updated_at");
			info commit;
			committed = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10) + " " + commit.substring(11,19);
			info committed;
			//  committedes = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10);
			// 	info committed;
			actdt = committed.unixEpoch("Europe/London");
			info actdt;
			mon = toDateTimeString(actdt,"yyyy-MMM-dd",timezone);
			info mon;
			dates = mon.subString(9,11) + "-" + mon.subString(5,8) + "-" + mon.subString(0,4);
			info dates;
			hh = toDateTimeString(actdt,"HH",timezone);
			info hh.toNumber();
			ampm = "AM";
			info ampm;
			if(hh.toNumber() > 12)
			{
				ampm = "PM";
				info ampm;
				hh = hh.toNumber() % 12;
				hh = hh.toString();
				info hh;
			}
			else if(hh.toNumber() == 12)
			{
				ampm = "PM";
			}
			tim = toDateTimeString(actdt,"mm:ss",timezone);
			info tim;
			actdatetime = dates + " " + hh + ":" + tim + " " + ampm;
			info actdatetime;
			elements = list();
			elements.add({"type":"activity","title":cname,"description":"Commented at: " + actdatetime + "\n" + body,"image_url":avatar});
			// 			info realname;
			// 			info Adminuser;
			if(realname == Adminuser)
			{
				elements.add({"type":"buttons","buttons":{{"label":"Edit","type":"invoke.function","name":"toeditcomment","id":gid,"emotion":"positive"},{"label":"Delete","type":"invoke.function","name":"todelete","id":gid,"emotion":"negative"}}});
			}
			elements.add({"type":"divider"});
			// 		info elements;
			sections.add({"id":comment.getJSON("id"),"elements":elements});
			// 		info sections.size();
			if(sections.size() > 10)
			{
				break;
			}
			info "------------------------------------";
		}
		nextpage = page + 1;
		nextcomments = invokeurl
		[
			url :gist.get("comments_url") + "?per_page=10&page=" + nextpage
			type :GET
			parameters:""
			connection:"githubgist"
		];
		// 		info nextcomments.size();
		if(nextcomments.size() > 0)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"nextcommfunc","id":page + ".." + gistid});
			footer = {"text":"","buttons":buttons};
		}
		return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header,"footer":footer};
	}
	return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header};
}
else if(tabid.equalsIgnoreCase("alltab"))
{
	page = 1;
	// 	info page;
	gist = invokeurl
	[
		url :"https://api.github.com/gists/" + gistid
		type :GET
		parameters:""
		detailed:false
		connection:"githubgist"
		content-type:"application/vnd.github+json"
	];
	// 	info gist;
	allcomments = invokeurl
	[
		url :gist.get("comments_url")
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info allcomments;
	comments = invokeurl
	[
		url :gist.get("comments_url") + "?per_page=10&page=" + page
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info comments;
	elements = list();
	gistfiles = gist.get("files");
	gistfilesc = gistfiles.keys();
	name = gistfilesc.get(0);
	content = gistfiles.get(name).get("content");
	size = gistfiles.get(name).get("size");
	desc = gist.get("description");
	if(desc == null)
	{
		desc = name;
	}
	url = gist.get("html_url");
	urlrev = url + "/revisions";
	if(name.len() > 100)
	{
		name = name.subString(0,96) + "...";
	}
	elements.add({"type":"text","text":"Gist : " + "[" + name + "](" + urlrev + ")"});
	if(desc.len() > 256)
	{
		desc = desc.subString(0,250) + "...";
	}
	elements.add({"type":"text","text":desc});
	gid = gist.get("id");
	header = {"title":"Gist - Comments","navigation":"continue","buttons":{{"label":"+ Comment","type":"invoke.function","name":"CreategistComment","id":gid,"emotion":"positive"}}};
	elements.add({"type":"divider"});
	elements.add({"type":"title","text":"Comments (" + allcomments.size() + ")"});
	sections.add({"id":1,"elements":elements});
	if(comments == null || comments.size() == 0)
	{
		elements.add({"type":"title","text":"No comments found"});
	}
	else
	{
		for each  comment in comments
		{
			// 		info comment;
			// 		info elements;
			cname = comment.get("user").get("login");
			realname = cname;
			if(cname.len() > 100)
			{
				cname = cname.subString(0,97) + "...";
			}
			avatar = comment.get("user").get("avatar_url");
			body = comment.get("body");
			if(body.contains("!") && body.contains("[") && body.contains("]") && body.contains("(") && body.contains(")"))
			{
				a1 = body.indexOf("[");
				info a1;
				a2 = body.indexOf("]");
				info a2;
				u1 = body.indexOf("(");
				info u1;
				u2 = body.indexOf(")");
				info u2;
				body = body.subString(a1,u1) + body.subString(u1,u2 + 1);
				info body;
			}
			if(body.len() > 200)
			{
				body = body.subString(0,200) + "...";
			}
			commit = comment.get("updated_at");
			committed = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10) + " " + commit.substring(11,19);
			//  committedes = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10);
			// 	info committed;
			actdt = committed.unixEpoch("Europe/London");
			mon = toDateTimeString(actdt,"yyyy-MMM-dd",timezone);
			dates = mon.subString(9,11) + "-" + mon.subString(5,8) + "-" + mon.subString(0,4);
			hh = toDateTimeString(actdt,"HH",timezone);
			ampm = "AM";
			if(hh.toNumber() > 12)
			{
				ampm = "PM";
				hh = hh.toNumber() % 12;
				hh = hh.toString();
			}
			else if(hh.toNumber() == 12)
			{
				ampm = "PM";
			}
			tim = toDateTimeString(actdt,"mm:ss",timezone);
			actdatetime = dates + " " + hh + ":" + tim + " " + ampm;
			elements = list();
			elements.add({"type":"activity","title":cname,"description":"Commented at: " + actdatetime + "\n" + body,"image_url":avatar});
			// 			info cname;
			// 			info Adminuser;
			// 			info newuser;
			// 			info user;
			if(realname == Adminuser)
			{
				elements.add({"type":"buttons","buttons":{{"label":"Edit","type":"invoke.function","name":"toeditcomment","id":gid,"emotion":"positive"},{"label":"Delete","type":"invoke.function","name":"todelete","id":gid,"emotion":"negative"}}});
			}
			// 		info elements;
			elements.add({"type":"divider"});
			sections.add({"id":comment.getJSON("id"),"elements":elements});
			// 		info sections.size();
			if(sections.size() > 10)
			{
				break;
			}
		}
		nextpage = page + 1;
		nextcomments = invokeurl
		[
			url :gist.get("comments_url") + "?per_page=10&page=" + nextpage
			type :GET
			parameters:""
			connection:"githubgist"
		];
		if(nextcomments.size() > 0)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"nextcommfunc","id":page + ".." + gistid});
			footer = {"text":"","buttons":buttons};
		}
		return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header,"footer":footer};
	}
	return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header};
}
else if(tabid.equalsIgnoreCase("startab"))
{
	page = 1;
	// 	info page;
	gist = invokeurl
	[
		url :"https://api.github.com/gists/" + gistid
		type :GET
		parameters:""
		detailed:false
		connection:"githubgist"
		content-type:"application/vnd.github+json"
	];
	// 	info gist;
	allcomments = invokeurl
	[
		url :gist.get("comments_url")
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info allcomments;
	comments = invokeurl
	[
		url :gist.get("comments_url") + "?per_page=10&page=" + page
		type :GET
		parameters:""
		connection:"githubgist"
	];
	// 	info comments;
	elements = list();
	gistfiles = gist.get("files");
	gistfilesc = gistfiles.keys();
	name = gistfilesc.get(0);
	// 	content = gistfiles.get(name).get("content");
	// 	size = gistfiles.get(name).get("size");
	desc = gist.get("description");
	if(desc == null)
	{
		desc = name;
	}
	url = gist.get("html_url");
	urlrev = url + "/revisions";
	if(name.len() > 100)
	{
		name = name.subString(0,96) + "...";
	}
	elements.add({"type":"text","text":"Gist : " + "[" + name + "](" + urlrev + ")"});
	if(desc.len() > 256)
	{
		desc = desc.subString(0,250) + "...";
	}
	elements.add({"type":"text","text":desc});
	gid = gist.get("id");
	header = {"title":"Gist - Comments","navigation":"continue","buttons":{{"label":"+ Comment","type":"invoke.function","name":"CreategistComment","id":gid,"emotion":"positive"}}};
	elements.add({"type":"divider"});
	elements.add({"type":"title","text":"Comments (" + allcomments.size() + ")"});
	sections.add({"id":1,"elements":elements});
	if(comments == null || comments.size() == 0)
	{
		elements.add({"type":"title","text":"No comments found"});
	}
	else
	{
		for each  comment in comments
		{
			// 		info comment;
			// 		info elements;
			cname = comment.get("user").get("login");
			realname = cname;
			if(cname.len() > 100)
			{
				cname = cname.subString(0,97) + "...";
			}
			avatar = comment.get("user").get("avatar_url");
			body = comment.get("body");
			if(body.contains("!") && body.contains("[") && body.contains("]") && body.contains("(") && body.contains(")"))
			{
				a1 = body.indexOf("[");
				info a1;
				a2 = body.indexOf("]");
				info a2;
				u1 = body.indexOf("(");
				info u1;
				u2 = body.indexOf(")");
				info u2;
				body = body.subString(a1,u1) + body.subString(u1,u2 + 1);
				info body;
			}
			if(body.len() > 200)
			{
				body = body.subString(0,200) + "...";
			}
			commit = comment.get("updated_at");
			committed = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10) + " " + commit.substring(11,19);
			//  committedes = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10);
			// 	info committed;
			actdt = committed.unixEpoch("Europe/London");
			mon = toDateTimeString(actdt,"yyyy-MMM-dd",timezone);
			dates = mon.subString(9,11) + "-" + mon.subString(5,8) + "-" + mon.subString(0,4);
			hh = toDateTimeString(actdt,"HH",timezone);
			ampm = "AM";
			if(hh.toNumber() > 12)
			{
				ampm = "PM";
				hh = hh.toNumber() % 12;
				hh = hh.toString();
			}
			else if(hh.toNumber() == 12)
			{
				ampm = "PM";
			}
			tim = toDateTimeString(actdt,"mm:ss",timezone);
			actdatetime = dates + " " + hh + ":" + tim + " " + ampm;
			elements = list();
			elements.add({"type":"activity","title":cname,"description":"Commented at: " + actdatetime + "\n" + body,"image_url":avatar});
			// 			info cname;
			// 			info Adminuser;
			// 			info newuser;
			// 			info user;
			if(realname == Adminuser)
			{
				elements.add({"type":"buttons","buttons":{{"label":"Edit","type":"invoke.function","name":"toeditcomment","id":gid,"emotion":"positive"},{"label":"Delete","type":"invoke.function","name":"todelete","id":gid,"emotion":"negative"}}});
			}
			// 		info elements;
			elements.add({"type":"divider"});
			sections.add({"id":comment.getJSON("id"),"elements":elements});
			// 		info sections.size();
			if(sections.size() > 10)
			{
				break;
			}
		}
		nextpage = page + 1;
		nextcomments = invokeurl
		[
			url :gist.get("comments_url") + "?per_page=10&page=" + nextpage
			type :GET
			parameters:""
			connection:"githubgist"
		];
		if(nextcomments.size() > 0)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"nextcommfunc","id":page + ".." + gistid});
			footer = {"text":"","buttons":buttons};
		}
		return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header,"footer":footer};
	}
	return {"type":"applet","tabs":tabsArr,"active_tab":tabid,"sections":sections,"header":header};
}
return Map();
