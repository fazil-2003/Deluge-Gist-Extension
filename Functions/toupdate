
info user;
info user.getJSON("timezone");
timezone = user.getJSON("timezone");
response = Map();
formValues = form.get("values");
info formValues;
//getting the form values
description = formValues.get("gistdescription");
info description;
public = formValues.get("public");
info public;
// filename = formValues.get("fileexe");
// info filename;
// gistcode = formValues.get("gistcode");
// info gistcode;
filename = formValues.get("file");
info filename;
gistcode = filename.getfilecontent();
gid = formValues.get("hidden");
info gid;
// a new header map to create a gist
header = Map();
filedetails = Map();
// sub map to header map
content = Map();
// sub map to filedetails map
content.put("content",gistcode);
//gistcode to content map
filedetails.put(filename,content);
// putting the filename and contentes map to filedetails map
header.put("description",description);
//adding description to header map
header.put("public",public);
// adding access to level to header map
header.put("files",filedetails);
//adding filedetails map to the header map
info header;
// to view the header map response
//add gist function takes place
toupdate = invokeurl
[
	url :"https://api.github.com/gists/" + gid
	type :PATCH
	parameters:header + ""
	detailed:false
	connection:"githubgist"
	content-type:"application/vnd.github+json"
];
info toupdate;
gistid = toupdate.get("id");
// info id;
// handling the record is created or not
if(gistid != null)
{
	tabid = "hometab";
	info tabid;
	gist = invokeurl
	[
		url :"https://api.github.com/gists/" + gistid
		type :GET
		parameters:""
		detailed:false
		connection:"githubgist"
		content-type:"application/vnd.github+json"
	];
	// info gist;
	i = invokeurl
	[
		url :"https://api.github.com/gists?per_page=1"
		type :GET
		parameters:""
		detailed:false
		connection:"githubgist"
		content-type:"application/vnd.github+json"
	];
	// info i;
	Adminuser = gist.get("owner").get("login").toString();
	info Adminuser;
	newuser = i.get(0).get("owner").get("login");
	info newuser;
	user = Adminuser.equalsIgnoreCase(newuser);
	info user;
	tabsArr = {{"label":"All - Gists","id":"alltab"},{"label":"Gists - Home","id":"hometab"}};
	sections = list();
	elements = list();
	header = Map();
	footer = Map();
	if(tabid.equalsIgnoreCase("hometab"))
	{
		gistfiles = gist.get("files");
		gistfilesc = gistfiles.keys();
		name = gistfilesc.get(0);
		content = gistfiles.get(name).get("content");
		size = gistfiles.get(name).get("size");
		desc = gist.get("description");
		url = gist.get("html_url");
		urlrev = url + "/revisions";
		if(name.len() > 100)
		{
			name = name.subString(0,96) + "...";
		}
		elements.add({"type":"text","text":"Gist : " + "[" + name + "](" + urlrev + ")"});
		if(desc.len() > 256)
		{
			desc = desc.subString(0,250) + "...";
		}
		elements.add({"type":"text","text":desc});
		elements.add({"type":"divider"});
		gid = gist.get("id");
		header = {"title":"Gist - Revision","navigation":"continue","buttons":{{"label":"Update","type":"invoke.function","name":"updategist","id":gid}}};
		// 	buttons = List();
		// 	buttons.add({"label":"Next","type":"invoke.function","name":"nextpagefunc","id":page + ".." + gid});
		// 	footer = {"buttons":buttons};
		history = gist.get("history");
		rowlist = list();
		i = 1;
		elements.add({"type":"text","text":"Revision Details : "});
		for each  reversion in gist.get("history")
		{
			revisionversion = reversion.get("version");
			gistrevision = invokeurl
			[
				url :"https://api.github.com/gists/" + gistid + "/" + revisionversion + "?per_page=100&page=1"
				type :GET
				parameters:""
				detailed:false
				connection:"githubgist"
				content-type:"application/vnd.github+json"
			];
			// 	info gistrevision;
			urlrev = gistrevision.get("html_url") + "/" + revisionversion;
			// 	info urlrev;
			namerev = gistrevision.get("files");
			namerevision = namerev.keys();
			nameofrev = namerevision.get(0);
			userin = reversion.get("user");
			userlogin = userin.get("login");
			// 	info userlogin;
			commit = reversion.get("committed_at");
			info commit;
			//2024-02-21 12:00:00
			committed = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10) + " " + commit.substring(11,19);
			//  committedes = commit.subString(0,4) + "-" + commit.subString(5,7) + "-" + commit.subString(8,10);
			// 	info committed;
			actdt = committed.unixEpoch("Europe/London");
			mon = toDateTimeString(actdt,"yyyy-MMM-dd",timezone);
			dates = mon.subString(9,11) + "-" + mon.subString(5,8) + "-" + mon.subString(0,4);
			hh = toDateTimeString(actdt,"HH",timezone);
			ampm = "AM";
			if(hh.toNumber() > 12)
			{
				ampm = "PM";
				hh = hh.toNumber() % 12;
				hh = hh.toString();
			}
			tim = toDateTimeString(actdt,"mm:ss",timezone);
			actdatetime = dates + " " + hh + ":" + tim + " " + ampm;
			//  actdt = committed.unixEpoch("GMT");
			// actdt = committed.gettime(12,true);
			// info actdt;
			// datetime = committedes+" "+actdt;
			// actdatetime = toDateTimeString(datetime,"dd-MMM-yyyy / HH:mm:ss",timezone);
			// stringdate = strdate.subString(4,6)+"-"+strdate.subString(0,3)+"-"+strdate.subString(8,12)+" "+strdate.subString(13,21);
			// actdatetime = stringdate.getDateTime(12,true);
			// info actdatetime;
			// 	info actdatetime;
			change = reversion.get("change_status");
			changes = change.get("total");
			if(changes == null)
			{
				changes = 1;
			}
			if(nameofrev.len() > 100)
			{
				nameofrev = nameofrev.subString(0,97) + "...";
			}
			row = {"Version Name":nameofrev,"User":userlogin,"Commit time":actdatetime,"Changes":changes};
			rowlist.add(row);
		}
		elements.add({"type":"table","headers":{"Version Name","User","Commit time","Changes"},"rows":rowlist,"style":{"width":{"25","25","25","25"},"text_align":{"center","center","center","center"}}});
		// 	elements.add({"type":"buttons","buttons":{{"label":"+ Comment","type":"invoke.function","name":"CreategistComment","id":gid,"emotion":"positive"}}});
		sections.add({"id":1,"elements":elements});
	}
	return {"type":"applet","tabs":tabsArr,"active_tab":"hometab","sections":sections,"header":header,"footer":footer};
}
else
{
	response.put("type","banner");
	response.put("text","Error while updating gists, please try again later !");
}
return response;
